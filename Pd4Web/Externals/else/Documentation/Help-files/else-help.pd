#N canvas 440 23 561 713 10;
#X declare -path else;
#X msg 315 312 about;
#X obj 3 683 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 307 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 3 pd;
#X obj 346 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 459 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 516 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 503 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 31 40 cnv 4 4 4 empty empty The 0 28 2 18 #e0e0e0 #000000 0;
#X obj 68 40 cnv 4 4 4 empty empty ELSE 0 28 2 18 #e0e0e0 #000000 0;
#X obj 126 40 cnv 4 4 4 empty empty binary 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 4 cnv 15 301 42 empty empty else 20 20 0 33 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X obj 4 509 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 557 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 651 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 93 517 cnv 17 3 32 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 93 566 cnv 17 3 34 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 127 516 about;
#X text 115 533 version;
#X text 133 566 list;
#X msg 329 333 version;
#X text 71 352 Check "All About ELSE":;
#X obj 315 475 else/display;
#X obj 118 122 declare -path else;
#X obj 315 360 else;
#X obj 94 380 All_about_else;
#X text 168 516 - prints library information on the terminal;
#X text 168 533 - outputs version information as a list;
#X text 43 91 The ELSE library is a set of separate binaries and abstractions. You can load it via "Preferences => Path" or \, alternatively \, you can use [declare] as follows:, f 76;
#X text 57 431 ELSE's repository;
#X obj 57 446 else/openfile -h http://www.github.com/porres/pd-else;
#X obj 93 606 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 133 606 list;
#X text 168 567 - ELSE version (major \, minor \, bugfix \, status \, status number);
#X obj 315 416 else/display;
#X obj 325 384 else/display;
#X obj 360 356 else/display;
#X obj 93 627 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 133 627 list;
#X text 168 607 - Pd version (major \, minor \, bugfix);
#X text 168 628 - Pd flavor information;
#X obj 315 448 else/format ELSE %d.%d-%d_%s-%d;
#X text 121 582 symbol;
#X text 168 583 - ELSE's directory when receiving 'dir' message;
#X text 241 123 Check [declare]'s help for more info.;
#X text 252 660 NONE, f 6;
#X text 43 148 You can also load the else binary via declare \, startup or as an object. At setup time \, this prints some basic information about the ELSE library in Pd's window and loads a GUI plugin with an object browser menu tree (right click anywhere on the patch to see this)., f 76;
#X text 43 197 If created as an object \, the same happens but you also get an object that accepts the "about" message (which reprints the same basic information on the terminal (with version \, release date \, etc). The object also accepts the "version" message that outputs the version information of ELSE as a list as well as Pd's running version and flavor. Loading the binary as a library at startup is useful if you want to know what version of ELSE you have when you start Pd and to load the browser plugin without having to create the object., f 76;
#X connect 0 0 27 0;
#X connect 23 0 27 0;
#X connect 27 0 37 0;
#X connect 27 1 38 0;
#X connect 27 2 39 0;
#X connect 37 0 44 0;
#X connect 44 0 25 0;
