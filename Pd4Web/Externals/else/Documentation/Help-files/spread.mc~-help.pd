#N canvas 395 80 565 514 10;
#X obj 9 324 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 7 395 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 8 428 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X text 200 406 signal;
#X obj 151 331 cnv 17 3 33 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 2 3 cnv 15 301 42 empty empty spread.mc~ 20 20 2 37 #e0e0e0 #000000 0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 40 cnv 4 4 4 empty empty Spread\ multichannel\ input\ to\ a\ multichannel\ output 0 28 2 18 #e0e0e0 #000000 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 8 488 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 152 403 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 480 71 else/setdsp~;
#X text 200 330 signal;
#X obj 188 223 else/spread.mc~ 4, f 28;
#X obj 188 257 else/s2f~;
#X listbox 188 287 26 0 0 0 - - - 12;
#X obj 188 150 else/sigs~ 1 2 3;
#X text 34 214 see also:;
#X obj 24 242 else/spread~;
#X text 176 442 - 'n' number of output channels (2 to 512 \, default 2);
#X text 118 442 1) float;
#X text 182 348 n <float>;
#X text 252 348 - set number of output channels;
#X msg 129 186 n 2;
#X msg 160 186 n 3;
#X msg 199 186 n 4;
#X msg 234 186 n 5, f 4;
#X msg 274 186 n 6, f 4;
#X text 252 330 - multichannel input, f 31;
#X text 252 405 - multichannel output;
#X obj 24 291 else/rotate.mc~;
#X obj 24 267 else/pan.mc~;
#X text 64 90 [spread.mc~] spreads any number of input channels across any number of output channels with equal power panning according to a spread parameter. It takes and outputs a multichannel signal., f 62;
#X obj 150 371 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 200 370 signal;
#X text 252 370 - spread parameter;
#X text 176 459 - spread (default 1);
#X text 118 459 2) float;
#N canvas 438 23 507 500 spread 0;
#X obj 35 331 setdsp~;
#X obj 320 304 else/f2s~ 10 1;
#X obj 320 246 else/knob 50 0.5 2 1 1 empty empty #dfdfdf #7c7c7c black 1 0 0 0 1 320 0 0 1;
#X obj 320 330 numbox~ 6 10 100 #C0C0C4 #440008 10 0 0 0;
#X text 385 330 spread;
#X obj 137 361 else/spread.mc~ 4, f 31;
#X obj 137 295 sigs~ 1 2 3;
#X obj 137 392 else/s2f~;
#X listbox 137 423 28 0 0 0 - - - 0;
#X text 46 16 The algorithm is basically the same as [pan~] where each input gets it's location according proportional to the output. In the first example below \, the signals "1" and "3" correspond exactly to the outer channels \, but "2" sits in between the two middle outputs \, so the signal is panned to both at mid point via the usual Sine/Cosine equal power function. This is considering the default spread value of 1!, f 71;
#X text 46 95 Spread values greater than 1 spreads the signal to more channels while smaller than 1 narrows the crossfading point closer to the selected channel. In the example below \, if you give it a spread value of 0.5 \, "2" doesn't reach any of the outputs while "1" and "3" still match the exact spot of the outer outputs. Values greater than one will spread "1" and "3 to adjacent channels (and it spreads circularly like [pan~])., f 71;
#X msg 159 326 n 4;
#X msg 192 326 n 5;
#X text 50 185 Try also the other exanmple by setting 'n' to '5' to see if you can figure this out., f 70;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 5 1;
#X connect 5 0 7 0;
#X connect 6 0 5 0;
#X connect 7 0 8 0;
#X connect 11 0 5 0;
#X connect 12 0 5 0;
#X restore 457 273 pd spread;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 23 0 20 0;
#X connect 30 0 20 0;
#X connect 31 0 20 0;
#X connect 32 0 20 0;
#X connect 33 0 20 0;
#X connect 34 0 20 0;
