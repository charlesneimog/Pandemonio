#N canvas 458 29 564 634 10;
#X obj 2 4 cnv 15 301 42 empty empty knob 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 4 graph;
#X obj 23 39 cnv 4 4 4 empty empty GUI\ knob 0 28 2 18 #e0e0e0 #000000 0;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X obj 344 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 457 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 6 158 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 511 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 606 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 85 166 cnv 17 3 341 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 80 520 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 119 224 size <float>;
#X text 161 164 float;
#X obj 6 544 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 125 179 set <float>;
#X text 202 209 -;
#N canvas 236 131 1100 450 basic 0;
#X floatatom 131 314 8 0 0 0 - - - 12;
#X msg 164 226 angle 360;
#X msg 156 206 angle 320;
#X msg 44 207 arc \$1;
#X obj 44 172 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 131 136 5 0 127 0 - - - 12;
#X msg 276 157 range -10 10;
#X msg 81 174 set 64;
#X msg 535 151 circular \$1;
#X obj 535 124 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 276 315 8 0 0 0 - - - 12;
#X msg 457 169 outline \$1;
#X obj 457 143 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 442 221 r \$0-knob;
#X floatatom 888 109 5 50 150 0 - - - 12;
#X msg 888 137 size \$1;
#X obj 958 115 else/colors;
#X msg 958 136 bgcolor \$1;
#X obj 986 208 else/colors;
#X msg 986 229 fgcolor \$1;
#X obj 969 161 else/colors;
#X obj 131 251 else/knob 50 0 127 0 0 empty empty #dfdfdf #afafaf black 1 0 0 0 1 320 0 0 90.17;
#X obj 276 252 else/knob 50 -50 50 0 0 empty empty #dfdfdf #afafaf black 1 0 0 0 1 320 0 0 0;
#X obj 888 265 else/knob 150 0 127 0 0 empty empty #ffffff #606060 #c00402 0 0 0 0 1 320 0 0 0;
#X obj 535 200 else/knob 100 0 127 0 0 empty empty #dfdfdf #afafaf black 1 0 0 0 1 360 0 0 0;
#X obj 44 146 loadbang;
#X msg 255 136 range -50 50;
#X text 441 8 Click and dragging on the [knob] works both in vertical and horizontal axis - dragging down or left decreases values \, while dragiing up or right increases them. Note that when you can click on the [knob] it gets activated by showing a tiny center circle. If active \, you can use the up/down or left/right arrow keys to increment/decrement values. If shift is pressed before clicking \, the mouse dragging or arrow keys increment/decrement in hundredths. When active \, you can also hit enter to output the current value. Clicking outside the object deactivates it., f 63;
#X msg 631 145 send \\\$0-knob;
#X obj 442 254 else/display 7;
#X msg 632 168 send empty;
#X text 861 16 The 'size' message sets size in pixels. The bgcolor \, arccolor and fgcolor parameters set background \, arc background and foreground color with a hex symbol or a list of RGB values (3 values from 0 to 255)., f 35;
#X msg 969 182 arccolor \$1;
#X text 651 199 You can also set the motion to 'circular' and in this case the [knob] follows the angular position of your mouse motion \, which allows for a 'looped' or 'infinite' knob (which makes more sense if the angular range is 360 degrees). Using arrow keys also make it loop around., f 32;
#X msg 288 179 load 5;
#X msg 297 201 load 0;
#X msg 305 225 load;
#X text 43 258 alt + click to restore start state, f 13;
#X msg 150 180 start;
#X msg 143 161 start 90;
#X text 19 345 The 'load' message sets the initial value for when the object is loaded (0 by default). This value is not output when loading the patch \, so you need [loadbang] if you want that. If you only send it 'load' \, then [knob] saves the current state by capturing the current value as the initialization value. The 'start' value is where the arc starts \, just 'start' also sets current value. alt+clicking on the object restores to the 'start' value., f 65;
#X text 19 6 By default \, the angular range is 320 degrees. The object also draws an 'arc' by default with its own color \, which is useful to display the initial and final position. You can change this with the 'arc' or 'angle' messages \, properties or flags. A full 360 degree is possible and the arc is then useful to differentiate from the fully turned down (background color) to the turned up [knob] (foreground color). The default range is from 0 to 127 \, but you can change that in the same way. A float sets and outputs values \, which get clipped to the [knob]'s range. A 'set' message only sets the value (no output)., f 65;
#X obj 457 120 loadbang;
#X text 429 314 When in edit mode \, [knob] shows its inlet/outlet and an outline. The outline can hidden when not in edit mode if you use the "outline 0" message \, set it via properties or use the '-nooutline' flag. The inlet will always be hidden if you have a receive symbol \, same with the outlet if you have a send symbol. You can set a send symbol above to send messages to a matching [receive] object. A receive symbol makes [send] objects communicate to it. If you set send/receive names to "empty" then the symbols are cleared and inlet/outlet are shown again. Note you need to escape dollar signs with backslashes to set send receive names via messages or flags \, but not via properties!, f 69;
#X text 918 424 (outline hidden);
#X connect 1 0 21 0;
#X connect 2 0 21 0;
#X connect 3 0 21 0;
#X connect 4 0 3 0;
#X connect 5 0 21 0;
#X connect 6 0 22 0;
#X connect 7 0 21 0;
#X connect 8 0 24 0;
#X connect 9 0 8 0;
#X connect 11 0 24 0;
#X connect 12 0 11 0;
#X connect 13 0 29 0;
#X connect 14 0 15 0;
#X connect 15 0 23 0;
#X connect 16 0 17 0;
#X connect 17 0 23 0;
#X connect 18 0 19 0;
#X connect 19 0 23 0;
#X connect 20 0 32 0;
#X connect 21 0 0 0;
#X connect 22 0 10 0;
#X connect 25 0 4 0;
#X connect 26 0 22 0;
#X connect 28 0 24 0;
#X connect 30 0 24 0;
#X connect 32 0 23 0;
#X connect 34 0 22 0;
#X connect 35 0 22 0;
#X connect 36 0 22 0;
#X connect 38 0 21 0;
#X connect 39 0 21 0;
#X connect 42 0 12 0;
#X restore 495 106 pd basic;
#N canvas 422 73 772 634 +parameters 0;
#X obj 327 123 else/knob 90 0 1 4 0 empty empty #9a9f9c #feffc6 #402420 0 0 2 0 0 320 0 0 0;
#X obj 574 98 else/rescale;
#X floatatom 327 232 11 0 0 0 - - - 12;
#X msg 327 86 exp \$1;
#X floatatom 327 59 5 0 0 0 - - - 0;
#X obj 327 31 else/initmess 4;
#X obj 564 448 else/knob 110 110 1760 1 440 empty empty #202020 #bbbbbb #00faff 0 0 0 0 1 320 0 0 0;
#X floatatom 564 582 11 0 0 0 - - - 12;
#X floatatom 200 288 4 0 0 0 - \$0-discrete - 16;
#X msg 172 129 discrete \$1;
#X obj 172 101 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 191 264 0;
#X text 167 246 1;
#X text 158 217 2;
#X text 162 190 3;
#X text 181 165 4;
#X text 212 158 5;
#X text 240 165 6;
#X text 261 190 7;
#X text 265 217 8;
#X text 255 246 9;
#X text 227 264 10;
#X obj 172 175 else/knob 90 0 10 0 0 \$0-discrete empty #000000 #afafaf #dfdfdf 0 0 11 1 0 320 0 0 0;
#X obj 380 81 else/rescale -exp 4 0 1, f 12;
#X msg 564 400 log \$1;
#X obj 564 367 tgl 22 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 380 60 else/midi.learn;
#A saved;
#X text 656 97 <-- see also;
#X obj 156 488 cnv 15 125 125 empty empty empty 20 12 0 10 #53535f #404040 0;
#X obj 155 487 else/knob 125 1 10 0 1 empty empty #7c7c7c #000000 #b3dfde 1 90 11 1 1 320 90 0 0;
#X msg 155 458 offset \$1;
#X floatatom 155 432 5 0 0 0 - - - 0;
#X text 40 324 Besides the angular range \, you can also set an angle offset to shift the start position. The example below is similar to the above \, but the shift is 90 degrees the motion is circular \, there is an arc and we have an outline. Additionally \, not that there's a canvas in the background so you can set yet a 4th color in the scheme., f 41;
#X text 488 21 [knob] has an exponential and log feature just like the [rescale] object. For more details \, check the help file of [rescale]. Note that sometimes you may need to use [rescale] as well \, like when knob receives data from MIDI controllers (see example to the left)., f 42;
#X text 453 130 The example to the left has an initial quartic function setting and a range from 0 to 1 (well suited for setting a volume gain \, for instance). There are 2 ticks to indicate start and end position., f 48;
#X text 40 16 You can set a number of internal ticks. If you also set it to discrete mode as below \, [knob] changes in discrete steps according to the number of ticks. Note that the first and last ticks are a bit thicker and wider. The numbers are comments., f 40;
#X obj 564 338 loadbang;
#X text 333 283 In log mode \, the range cannot reach or cross a value of 0! This mode supersedes the 'exp' mode \, so the 'exp' value is ignored., f 68;
#X text 333 398 The log mode is well suited for setting things like frequencies. To the right we have a frequency range that is from 110 to 1760 \, which covers 4 octaves from A2 to A6. The mid point is A4 (440 hz)., f 33;
#X text 453 235 You can also set to linear via the properties window mode with the 'log' message, f 48;
#X text 453 194 You can change the exp value via message or set via a flag. Note that setting The 'exp' factor to '1' \, '0' or '-1' makes it linear., f 48;
#X text 333 338 You can set to log mode with the 'log' message or flag. You can also set it via the properties window., f 33;
#X text 45 145 Note that you can also use arrows to navigate the knob and in this case the step change is discrete as well., f 13;
#X text 39 503 Try also arrow keys here. It now loops as well., f 14;
#X msg 623 416 jump \$1;
#X obj 623 385 tgl 22 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 653 386 <- jump on click;
#X text 333 485 You can see that how when the knob reaches the mid point of the knob you have '440' as the mid value between 110 and 1760! You can also alt+click to go directly to this mid value. Other usages include a frequency or gain multiplier \, from 0.5 to 2 for instance \, where 1 is the mid point., f 33;
#X connect 0 0 2 0;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 9 0 22 0;
#X connect 10 0 9 0;
#X connect 23 0 0 0;
#X connect 24 0 6 0;
#X connect 25 0 24 0;
#X connect 26 0 23 0;
#X connect 30 0 29 0;
#X connect 31 0 30 0;
#X connect 36 0 25 0;
#X connect 44 0 6 0;
#X connect 45 0 44 0;
#X restore 460 127 pd +parameters;
#X floatatom 227 128 8 0 0 0 - - - 12;
#X text 161 520 float;
#X text 202 163 - sets and outputs value, f 54;
#X text 202 520 - knob's value;
#X text 137 76 [knob] is a GUI knob., f 11;
#X text 167 194 bang;
#X text 202 194 - outputs value, f 54;
#X text 125 239 arc <float>;
#X text 101 269 outline <float>;
#X text 95 377 circular <float>;
#X text 113 392 angle <float>;
#X text 107 407 offset <float>;
#X text 113 422 send <symbol>;
#X text 95 436 receive <symbol>;
#X text 125 450 exp <float>;
#X text 113 464 ticks <float>;
#X text 95 478 discrete <float>;
#X text 202 178 - sets value (no output), f 54;
#X text 202 224 - sets size in pixels (default: 50), f 54;
#X text 202 284 -;
#X text 202 299 -;
#X text 107 299 bgcolor <list>;
#X text 202 351 -;
#X text 202 239 - non zero sets to arc drawing mode (default: 1), f 54;
#X text 202 392 - sets angular range value in degrees (default: 320), f 54;
#X text 202 407 - sets angular offset in degrees (default: 0), f 54;
#X text 202 422 - sets send symbol (default: empty), f 54;
#X text 202 436 - sets receive symbol (default: empty), f 54;
#X text 202 450 - sets exponential value (default: 1), f 54;
#X text 202 464 - sets number of ticks (default: 0), f 54;
#X text 202 478 - non zero sets to discrete mode (default: 0), f 54;
#X text 202 377 - non zero sets to circular dragging mode (default: 0);
#X obj 227 66 else/knob 50 0 127 0 0 empty empty #dfdfdf #7c7c7c black 1 0 0 0 1 320 0 0 0;
#X text 107 351 fgcolor <list>;
#X text 202 325 -;
#X text 101 325 arccolor <list>;
#X text 214 325 sets the arc background color in hexadecimal or RGB list (default: #afafaf), f 52;
#X text 214 299 sets background color in hexadecimal or RGB list (default: #dfdfdf), f 52;
#X text 214 351 sets foreground color in hexadecimal or RGB list (default: #000000), f 52;
#X text 290 72 <--;
#X text 318 72 click and drag \, right click for properties, f 11;
#X text 119 493 jump <float>;
#X text 202 493 - non zero sets to jump on click mode (default: 0), f 54;
#X text 38 111 THIS OBJECT IS STILL EXPERIMENTAL!!!!, f 20;
#X text 119 209 load <float>;
#X text 214 209 sets load value \, no float sets current (default: 0), f 52;
#X text 202 254 -;
#X text 113 254 start <float>;
#X text 214 254 sets arc start value \, no float sets current (default: 0);
#X text 119 283 range <f \, f>;
#X text 214 284 sets lower and upper values (default: 0 \, 127), f 52;
#X text 202 269 - non zero sets to outline drawing mode (default: 1), f 54;
#X text 79 550 -size <float> | -range <float \, float> | -bgcolor <list> | -mgcolor <list> | -fgcolor <list> | -noarc | -nooutline | -angle <float> | -circular | -offset <float> | -send <symbol> | -receive <symbol> | -ticks <float> | -discrete | -jump, f 75;
#X connect 55 0 23 0;
