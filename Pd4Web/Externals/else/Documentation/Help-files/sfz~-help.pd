#N canvas 456 23 560 687 10;
#X obj 188 221 else/out~;
#X obj 2 3 cnv 15 301 42 empty empty sfz~ 20 20 2 37 #e0e0e0 #000000 0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 40 cnv 4 4 4 empty empty SFZ\ synthesizer 0 28 2 18 #e0e0e0 #000000 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 1 659 cnv 15 552 21 empty \$0-pddp.cnv.footer empty 20 12 0 14 #dcdcdc #404040 0;
#X obj 1 285 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlet 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 579 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 1 629 cnv 3 550 3 empty \$0-pddp.cnv.argument arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 167 128 else/keyboard 14 55 2 4 0 0 empty empty;
#X obj 77 586 cnv 17 3 17 empty \$0-pddp.cnv.let.n 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 77 606 cnv 17 3 17 empty \$0-pddp.cnv.let.r 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 151 637 1) symbol;
#X obj 384 103 else/openfile -h https://sfzformat.com/;
#N canvas 668 54 416 538 MIDI-in 0;
#N canvas 396 60 656 589 MIDI-input 0;
#X obj 109 116 ctlin;
#X obj 130 194 notein;
#X obj 159 391 polytouchin;
#X obj 49 33 pgmin;
#X obj 133 340 touchin;
#X obj 101 548 outlet;
#X obj 119 289 bendin;
#X obj 49 59 - 1;
#X msg 375 453 bend \$1;
#X obj 292 319 vsl 22 100 0 16384 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 375 321 sel 0;
#X obj 375 373 line;
#X msg 311 286 set \$1;
#X obj 375 400 change;
#X msg 375 347 8192 150;
#X obj 292 261 else/initmess 8192;
#X obj 375 297 else/mouse;
#X obj 375 424 else/rint;
#X msg 49 85 pgm \$1;
#X obj 77 143 pack f f;
#X msg 77 164 ctl \$1 \$2;
#X obj 101 216 pack f f;
#X msg 101 237 note \$1 \$2;
#X msg 119 311 bend \$1;
#X msg 133 362 touch \$1;
#X obj 145 415 pack f f;
#X msg 145 436 polytouch \$1 \$2;
#X text 231 172 Note that vanilla's [pgmin] object is indexed from 1 so you need to subtract 1 to use it on [sfz~] \, which is indexed from 0 ([pgm.in] from ELSE is also indexed from 0 by the way). The example below emulates a bend wheel \, maybe an extra object for the future...;
#X text 245 37 Using Vanilla's MIDI input objects for specific MIDI messages. the channel values are not needed!, f 49;
#X text 335 80 control change: value \, control, f 51;
#X text 255 80 ctl <f \, f> -;
#X text 335 107 pitch bend: value, f 51;
#X text 335 121 channel aftertouch: value, f 51;
#X text 267 107 bend <f> -;
#X text 237 121 touch <float> -;
#X text 219 135 polytouch <f \, f> -;
#X text 335 135 key aftertouch: value \, key, f 51;
#X text 335 94 program change: program, f 51;
#X text 249 94 pgm <float> -;
#X connect 0 0 19 0;
#X connect 0 1 19 1;
#X connect 1 0 21 0;
#X connect 1 1 21 1;
#X connect 2 0 25 0;
#X connect 2 1 25 1;
#X connect 3 0 7 0;
#X connect 4 0 24 0;
#X connect 6 0 23 0;
#X connect 7 0 18 0;
#X connect 8 0 5 0;
#X connect 9 0 11 0;
#X connect 10 0 14 0;
#X connect 11 0 12 0;
#X connect 11 0 13 0;
#X connect 12 0 9 0;
#X connect 13 0 17 0;
#X connect 14 0 11 0;
#X connect 15 0 9 0;
#X connect 16 0 10 0;
#X connect 17 0 8 0;
#X connect 18 0 5 0;
#X connect 19 0 20 0;
#X connect 20 0 5 0;
#X connect 21 0 22 0;
#X connect 22 0 5 0;
#X connect 23 0 5 0;
#X connect 24 0 5 0;
#X connect 25 0 26 0;
#X connect 26 0 5 0;
#X restore 145 339 pd MIDI-input;
#N canvas 558 88 641 514 control-messages 0;
#X obj 292 406 tgl 17 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 127;
#X obj 193 406 tgl 17 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 127;
#X obj 28 439 outlet;
#X obj 104 188 vsl 18 100 0 127 0 0 empty empty empty 0 -9 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 104 337 s \$0-ctl;
#X obj 58 409 r \$0-ctl;
#X obj 193 460 s \$0-ctl;
#X obj 292 460 s \$0-ctl;
#X obj 367 229 tgl 17 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 127;
#X obj 367 289 s \$0-ctl;
#X text 186 385 sustain pedal;
#X text 286 385 tonal or sostenuto pedal;
#X text 384 428 see also:;
#X text 91 163 modulation;
#X text 169 163 volume;
#X obj 181 337 s \$0-ctl;
#X obj 181 188 vsl 18 100 0 127 0 0 empty empty empty 0 -9 0 10 #dfdfdf #000000 #000000 0 1;
#X text 74 15 The control change parameters are programmed in a given synthesizer \, but if usually follows some standards like the messages where using here., f 72;
#X text 349 168 For reference \, see:;
#X obj 266 336 s \$0-ctl;
#X obj 266 187 vsl 18 100 0 127 0 0 empty empty empty 0 -9 0 10 #dfdfdf #000000 #000000 0 1;
#X text 263 163 pan;
#X msg 298 278 64;
#X text 391 229 flush note ons (panic);
#X msg 181 308 ctl \$1 7;
#X msg 266 307 ctl \$1 10;
#X msg 367 260 ctl \$1 123;
#X msg 292 434 ctl \$1 66;
#X obj 382 452 else/suspedal;
#X obj 473 169 else/openfile -h https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2 MIDI Specifications;
#X obj 28 63 else/keyboard 17 80 5 2 0 0 empty empty;
#X msg 193 434 ctl \$1 64;
#X msg 104 305 ctl \$1 1;
#X connect 0 0 27 0;
#X connect 1 0 31 0;
#X connect 3 0 32 0;
#X connect 5 0 2 0;
#X connect 8 0 26 0;
#X connect 16 0 24 0;
#X connect 20 0 25 0;
#X connect 22 0 25 0;
#X connect 24 0 15 0;
#X connect 25 0 19 0;
#X connect 26 0 9 0;
#X connect 27 0 7 0;
#X connect 30 0 2 0;
#X connect 31 0 6 0;
#X connect 32 0 4 0;
#X restore 161 389 pd control-messages;
#X obj 132 309 midiin;
#X obj 115 257 tgl 17 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X text 235 338 <-- open;
#X text 218 371 More on:;
#X obj 115 284 else/midi -loop midi-seq.mid;
#X obj 121 457 else/out~;
#X text 33 21 The supported MIDI messages are:;
#X text 99 43 - 'note' for Note messages \; - 'ctl' for Control Change \; - 'pgm' for Program Change \; - 'bend' for Pitch Bend \; - 'touchin' for Channel Aftertouch \; - 'polytouchin' for Key Aftertouch;
#X text 36 127 In the example of the parent patch \, the list message as given by [keyboard] acts in the same way as a 'note' message., f 53;
#X text 36 167 Raw MIDI is also possible via float input \, so you can use Pd Vanilla's [midiin] object or play a MIDI file from [midi]. You can also use vanilla's other MIDI objects like [pgmin] of course or the ones from ELSE \, such as [pgm.in] \, see [pd MIDI-input] below., f 53;
#X obj 115 428 else/sfz~ sfz/synth;
#X connect 0 0 12 0;
#X connect 1 0 12 0;
#X connect 2 0 12 0;
#X connect 3 0 6 0;
#X connect 6 0 12 0;
#X connect 12 0 7 0;
#X connect 12 1 7 1;
#X restore 468 227 pd MIDI-in;
#N canvas 520 107 634 524 tuning_&_more 0;
#X msg 81 165 panic;
#X obj 104 221 hsl 128 15 -1200 1200 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X floatatom 101 245 10 0 0 0 - - - 0;
#X msg 101 269 transp \$1;
#X text 100 198 set transposition in cents;
#X text 125 162 Big panic red button \, resets whole synth, f 21;
#X obj 85 434 else/out~;
#X obj 28 25 else/keyboard 17 80 5 3 0 0 empty empty;
#X msg 57 128 flush;
#X floatatom 189 265 5 0 0 0 - - - 0;
#X text 101 122 send note offs for all notes, f 16;
#N canvas 580 302 630 367 scale 0;
#X text 87 87 bohlen-pierce;
#X text 100 108 quarter tones;
#X obj 41 24 loadbang;
#X msg 273 121 base 57;
#X text 110 136 equal temperament;
#X obj 273 175 s \$0-tuning;
#X msg 283 146 base 60;
#X obj 41 225 s \$0-tuning;
#X text 77 50 eighth tones;
#X text 335 146 (default);
#X obj 52 273 r \$0-tuning;
#X obj 52 302 outlet;
#X text 275 100 Set fundamental;
#X msg 41 50 48 2;
#X msg 53 86 13 3;
#X msg 64 109 24 2;
#X msg 74 137 12 2;
#X text 328 121 (decimal values allowed);
#X obj 41 166 else/eqdiv;
#X obj 41 194 else/insert scale;
#X text 343 289 see also:;
#X obj 407 289 else/retune;
#X text 195 30 This example uses the [eqdiv] object to generate scales with equal divisions and starts with an eighth tone scale., f 40;
#X text 188 207 The 'base' message sets the scale fundamental in MIDI pitch (60 by default \, which is "C4"). Just 'scale' sets to the regular 12 tone temperament. Scales can have steps different that 12 and may not be based on the octave (such as the bohlen-Pierce scale). If picthes fall out of the 0-127 range \, the keys are muted. This behaves similarly to the [retune] object.;
#X connect 2 0 13 0;
#X connect 3 0 5 0;
#X connect 6 0 5 0;
#X connect 10 0 11 0;
#X connect 13 0 18 0;
#X connect 14 0 18 0;
#X connect 15 0 18 0;
#X connect 16 0 18 0;
#X connect 18 0 19 0;
#X connect 19 0 7 0;
#X restore 115 298 pd scale;
#X text 323 127 [sfz~] also has microtonal capabilities. The 'scale' message sets a scale in cents and you can previously set a base value with the 'base' message. See [pd scale] for more details., f 41;
#X msg 197 319 scala diamond7.scl;
#X text 323 194 The 'scala' message opens files in the scala format. See also:, f 41;
#X obj 477 216 else/scala;
#X text 229 264 set hz value for A4;
#X msg 189 288 a4 \$1;
#X obj 81 391 else/sfz~ sfz/synth;
#X connect 0 0 18 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 18 0;
#X connect 7 0 18 0;
#X connect 8 0 18 0;
#X connect 9 0 17 0;
#X connect 11 0 18 0;
#X connect 13 0 18 0;
#X connect 17 0 18 0;
#X connect 18 0 6 0;
#X connect 18 1 6 1;
#X restore 432 249 pd tuning_&_more;
#X text 213 637 - sets file to load (default none);
#N canvas 505 71 657 594 basic 0;
#X obj 213 516 else/out~;
#X listbox 131 332 8 0 0 0 - - - 12;
#X text 45 193 shift + click;
#X text 27 212 to hold keys -->;
#X text 64 324 Pitch \; Velocity \; Channel;
#X obj 131 184 else/keyboard 17 80 4 3 0 0 empty empty;
#X msg 231 391 version;
#X text 178 282 Play notes with either 'note' or list messages \, whose arguments are: MIDI Pitch \, Velocity and optional channel number., f 65;
#X msg 207 360 ctl \$1 1;
#X obj 210 330 hsl 149 17 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X text 384 323 There are also other MIDI like messages \, such as 'ctl' for Control Change., f 29;
#X text 289 391 print sfizz version;
#X msg 252 455 open;
#X text 289 455 just 'open' opens a dialog window to load a file.;
#X text 372 425 open a file*;
#X text 61 11 The [sfz~] object is based on 'sfizz' \, a SFZ player for the SFZ format. The SFZ format defines how a collection of samples are arranged for performance. It is quite different than a soundfont \, which includes both the samples and the definitions of sample behavior in the same binary file \, while SFZ is a file format which only defines the behavior of musical instruments and does not include the sample content., f 92;
#X text 61 72 A “.sfz” file is just a text file \, which can be created by any text editor (though for more complex cases with hundreds or thousands of samples \, there are dedicated SFZ creation tools). The ".sfz" file can also not contain any samples and use internal oscillators and also internal processors \, which makes the SFZ a hybrid synthesizer for samples and more., f 92;
#X obj 207 486 else/sfz~ sfz/synth;
#X text 335 484 * The .sfz extension is implied for both the open message and the argument., f 40;
#X text 61 126 Check the 'synth.sfz' file shipped with ELSE and used in this help file \, it doesn't really use any existing sample but internal oscillators and other definitions like ADSR settings and a lowpass filter controlled by a LFO. The next subpatch shows this better., f 92;
#X msg 243 425 open sfz/synth2.sfz;
#X connect 1 0 17 0;
#X connect 5 0 1 0;
#X connect 6 0 17 0;
#X connect 8 0 17 0;
#X connect 9 0 8 0;
#X connect 12 0 17 0;
#X connect 17 0 0 0;
#X connect 17 1 0 1;
#X connect 20 0 17 0;
#X restore 480 183 pd basic;
#X text 32 218 see also:;
#X obj 29 243 else/sfont~;
#X text 167 461 panic -;
#X text 220 544 transposition: cents \, channel (optional), f 52;
#X obj 76 293 cnv 17 3 282 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 125 475 scale <list> -;
#X text 125 500 base <float> -;
#X text 220 500 base MIDI pitch for scale, f 52;
#X text 220 475 scale in cents to retune (12-tone temperament if no list is given), f 52;
#X text 113 544 transp <float> -;
#X text 173 374 list -;
#X text 220 374 same as "note" message, f 52;
#X text 166 290 float -;
#X text 220 290 raw MIDI input, f 52;
#X text 220 360 note: key \, velocity, f 52;
#X text 119 418 touch <float> -;
#X text 89 389 ctl <float \, float> -;
#X text 125 404 bend <float> -;
#X text 101 432 polytouch <f \, f> -;
#X text 220 418 channel aftertouch: value, f 52;
#X text 220 432 key aftertouch: value \, key, f 52;
#X text 220 404 pitch bend: value, f 52;
#X text 220 389 control change: value \, control, f 52;
#X text 167 446 flush -;
#X text 220 446 sends note offs for all notes to clear hanging ones, f 52;
#X text 220 461 stops all sounds immediately, f 52;
#X text 113 514 scala <symbol> -;
#X text 220 514 open scala tuning file, f 52;
#X text 220 529 sets reference frequency for A4 in hertz, f 52;
#X text 137 529 a4 <float> -;
#X text 137 330 set <list> -;
#X text 220 330 load SFZ script as string, f 52;
#X text 118 304 open <symbol> -;
#X text 131 360 note <f \, f> -;
#X text 220 304 loads sfz file (.sfz extension implied) if no symbol is given \, dialog window opens (same as click), f 52;
#X text 219 587 left output signal of stereo output, f 39;
#X text 161 587 signal -;
#X text 161 607 signal -;
#X text 219 607 right output signal of stereo output, f 39;
#X text 47 86 [sfz~] is a samole synthesizer for 'SFZ' instruments. For details on the SFZ format \, players and instruments for download \, see:, f 73;
#X obj 167 193 else/sfz~ sfz/synth.sfz;
#X text 173 559 info -;
#X text 220 559 prints information on terminal window, f 52;
#X text 119 345 path <symbol> -;
#X text 220 345 set path for samples in a script (default patch's), f 52;
#N canvas 247 40 845 536 set/path 0;
#X obj 94 453 else/out~;
#X listbox 41 175 8 0 0 0 - - - 12;
#X obj 41 79 else/keyboard 17 80 3 3 0 0 empty empty;
#N canvas 718 236 357 309 oscillators 0;
#X msg 84 98 set <region> sample=*sine;
#X msg 96 126 set <region> sample=*tri;
#X msg 106 151 set <region> sample=*saw;
#X msg 117 178 set <region> sample=*square;
#X obj 84 239 outlet;
#X obj 84 70 loadbang;
#X text 87 21 Here we just load internal oscillators and noting else., f 30;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 5 0 0 0;
#X restore 107 176 pd oscillators;
#X text 35 24 The 'set' message allows you to load a whole .sfz file script. This is well suited for experts who really know what they're doing \, but here are some basic examples., f 62;
#X obj 107 408 else/sfz~;
#N canvas 512 177 476 321 load 0;
#X obj 241 161 loadbang;
#X obj 60 266 outlet;
#X obj 60 115 bng 23 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X text 55 34 Here we load the example file into a [text] object just so you can check it out. You can also use [text] to manipulate a string loaded as a file and send it to [sfz~] if you're a real nerd.;
#X text 91 117 <-- get text and load file as a string;
#X text 346 214 <-- click to check the file, f 14;
#X obj 241 212 text define sfz1;
#X obj 60 229 else/insert set;
#X msg 241 187 read -c sfz/synth.sfz;
#X obj 60 174 text tolist sfz1;
#X obj 60 201 else/remove \\\;;
#X connect 0 0 8 0;
#X connect 2 0 9 0;
#X connect 7 0 1 0;
#X connect 8 0 6 0;
#X connect 9 0 10 0;
#X connect 10 0 7 0;
#X restore 146 260 pd load file;
#N canvas 619 90 490 545 more 0;
#X obj 66 503 outlet;
#X msg 66 65 set <region> sample=*saw ampeg_attack=0.5 ampeg_release=1.0;
#X text 66 32 Now we also set attack and release for an internal envelope;
#X msg 92 155 set <group> ampeg_attack=0.5 ampeg_release=1.0 <region> sample=*saw <region> sample=*sine transpose=-12, f 46;
#X text 85 102 Here we add a second sine oscillator. The envelope is set as a 'group' for both oscillators. The 2nd oscillator is a sine oscillator transposed an octave down., f 57;
#X msg 112 254 set <group> ampeg_attack=0.5 ampeg_release=1.0 fil_type=lpf_4p resonance=10 cutoff=1500 <region> sample=*saw <region> sample=*sine transpose=-12, f 46;
#X text 142 217 Now we add a lowpass resonant filter (Q=10 \, Cuttof=1500, f 29;
#X msg 125 363 set <group> ampeg_attack=0.5 ampeg_release=1.0 fil_type=lpf_4p resonance=10 cutoff=1500 cutoff_oncc1=2500 <region> sample=*saw <region> sample=*sine transpose=-12, f 46;
#X text 153 324 Now we set MIDI Controller #1 to set an offset for the cutoff frequency, f 37;
#X text 155 428 Use the slider on the parent patch to change the control number value, f 38;
#X connect 1 0 0 0;
#X connect 3 0 0 0;
#X connect 5 0 0 0;
#X connect 7 0 0 0;
#X restore 128 219 pd more;
#X msg 159 331 ctl \$1 1;
#X obj 162 305 hsl 149 17 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 568 336 else/keyboard 18 77 1 4 0 0 empty empty;
#X obj 513 458 else/out~;
#X obj 451 33 loadbang;
#X text 563 114 <-- click to check the file, f 14;
#X obj 451 116 text define sfz2;
#X msg 466 87 read -c sfz/synth2.sfz;
#X obj 374 338 else/insert set;
#X obj 374 310 else/remove \\\;;
#X obj 487 253 file patchpath;
#X obj 374 283 text tolist sfz2;
#X msg 487 277 path \$1;
#X msg 451 59 read -c sfz/kit.sfz;
#X msg 487 231 symbol sfz;
#X obj 374 196 bng 23 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 374 257 t b b;
#X obj 549 427 else/sfz~;
#X msg 549 300 set <region> sample=sfz/samples/s3.wav <region> sample=sfz/samples/s5.wav, f 38;
#X obj 549 278 loadbang;
#X text 597 35 Here we finally have examples with samples \, which are called from a path relative to the file's path., f 35;
#X text 405 202 load file;
#X text 493 157 When you load a string with samples. By default \, the path relative to the patch is considered. If you want to use a custom relative patch you can use the 'path' message \, which needs to come before the 'set' message., f 48;
#X text 634 250 The message below is the same as loading the 'sfz/synth2.sfz' file., f 23;
#X text 639 430 Note you can use [else/dir] \, [openpanel] \, [file cwd] and and [file patchpath] as in this example to help get to a desired custom path., f 29;
#X connect 1 0 5 0;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 5 0 0 0;
#X connect 5 1 0 1;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 8 0;
#X connect 10 0 25 0;
#X connect 12 0 21 0;
#X connect 15 0 14 0;
#X connect 16 0 25 0;
#X connect 17 0 16 0;
#X connect 18 0 20 0;
#X connect 19 0 17 0;
#X connect 20 0 25 0;
#X connect 21 0 14 0;
#X connect 22 0 18 0;
#X connect 23 0 24 0;
#X connect 24 0 19 0;
#X connect 24 1 22 0;
#X connect 25 0 11 0;
#X connect 25 1 11 1;
#X connect 26 0 25 0;
#X connect 27 0 26 0;
#X restore 462 205 pd set/path;
#X connect 16 0 65 0;
#X connect 65 0 0 0;
#X connect 65 1 0 1;
