#N canvas 381 41 560 631 10;
#X obj 2 3 cnv 15 301 42 empty empty voices 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 305 3 graph;
#X obj 22 39 cnv 4 4 4 empty empty Polyphonic 0 28 2 18 #e0e0e0 #000000 0;
#X obj 110 39 cnv 4 4 4 empty empty voice 0 28 2 18 #e0e0e0 #000000 0;
#X obj 155 39 cnv 4 4 4 empty empty allocator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 605 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 6 314 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 470 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 502 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 102 478 cnv 17 3 17 empty empty n 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 103 322 cnv 17 3 115 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 544 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 125 382 retrig <float> - non zero sets to retrigger mode., f 66;
#X text 179 396 clear - clears memory without output, f 57;
#X text 179 410 flush - clears memory and output hanging notes, f 57;
#X text 125 368 offset <float> - sets index offset (in the context of "list" mode), f 66;
#X text 185 478 list - note messages, f 57;
#X text 161 509 1) float - sets number of voices (default 1);
#X text 161 524 2) float - non zero sets voice stealing (default 0);
#X text 143 551 -rel <float>: sets release time in ms (default 0);
#X text 143 354 rel <float> - sets a release time in ms, f 63;
#X text 125 424 voices <float> - sets number of voices (in list mode only), f 66;
#X text 30 250 see also:;
#X text 180 584 -split: sets to split mode, f 49;
#X obj 192 261 else/display;
#X obj 273 261 else/display;
#X obj 192 231 else/voices 2, f 14;
#X obj 130 174 notein;
#X obj 130 198 pack;
#X obj 192 159 else/keyboard 22 60 1 4 1 0 empty empty;
#X text 184 289 voices;
#X text 269 290 extra voices;
#X text 288 229 <-- 1st argument is the number of voices, f 20;
#N canvas 451 76 825 426 example 0;
#X obj 140 317 else/display;
#X msg 97 200 60 \$1;
#X obj 97 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 140 242 else/display;
#X obj 140 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 184 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 230 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 140 200 61 \$1;
#X msg 184 200 62 \$1;
#X msg 230 200 63 \$1;
#X msg 49 248 offset \$1;
#X obj 49 225 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 193 263 voices \$1;
#X msg 193 237 2;
#X msg 233 237 4;
#X obj 215 315 else/display;
#X obj 140 289 else/voices 4;
#X obj 394 160 else/keyboard 17 80 2 4 0 0 empty empty;
#N canvas 470 55 378 320 random 0;
#X obj 86 246 pack f f;
#X obj 86 283 outlet;
#X obj 50 19 inlet;
#X obj 50 44 expr random(60 \, 72) \; random(90 \, 127) \; random(750 \, 1250);
#X obj 86 221 makenote;
#X obj 183 116 expr $f1 + random(2 \, 5);
#X obj 199 140 expr $f1 + random(2 \, 5);
#X obj 217 164 expr $f1 + random(2 \, 5);
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 5 0;
#X connect 3 1 4 1;
#X connect 3 2 4 2;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X restore 394 132 pd random chords;
#X obj 394 102 bng 18 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 515 297 According to the voice index (the first element in the list sent by [voices]) \, the MIDI note messages are routed to different instances of "voice.pd"., f 43;
#X obj 394 294 clone 4 voice 4;
#X obj 395 331 else/out~;
#X obj 394 265 else/voices 4 1;
#X text 515 349 check clone's help file and click on in to open the patch., f 43;
#X text 47 31 [voices] outputs a list with voice index \, pitch and velocity. You can also change the number of voices with the "voices" message \, which causes the object to flush and clear its memory. The index offset is 0 by default and you can set a different one with the "offset" message., f 51;
#X text 515 261 Here [voices] feeds [clone] \, which loads 4 instances of a patch named "voice.pd"., f 43;
#X obj 319 160 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 319 185 steal \$1;
#X text 386 32 You can set the object to "voice stealing" mode with the second argument or the "steal" message. This mode forces a note off message on the first allocated voice so the extra incoming voice "steals" it (just like [poly~]).;
#X text 538 98 [voices] is particularly useful in conjunction with [clone] to implement polyphonic synths., f 32;
#X text 47 107 After a voice is allocated \, the object needs to receive a corresponding note-off message so that voice can be used again., f 51;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 16 0;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 10 0 16 0;
#X connect 11 0 10 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 16 0 0 0;
#X connect 16 1 15 0;
#X connect 17 0 23 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 21 0 22 0;
#X connect 21 1 22 1;
#X connect 23 0 21 0;
#X connect 27 0 28 0;
#X connect 28 0 23 0;
#X restore 467 199 pd example;
#N canvas 609 153 435 360 split 0;
#X obj 124 193 else/display;
#X obj 182 193 else/display;
#X obj 241 192 else/display;
#X text 123 222 voice 1;
#X text 184 222 voice 2;
#X text 242 222 extra;
#X obj 124 71 else/keyboard 25 80 1 4 1 0 empty empty;
#X obj 124 167 else/voices -split 2;
#X text 39 19 In "split" mode \, [voices] allocates the given number of voices and outputs each one via separate inlets. Extra voices are sent to the rightmost outlet.;
#X msg 55 121 steal \$1;
#X obj 55 98 tgl 16 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X text 54 258 By the way \, the rightmost outlet (in regular or split mode) can still send messages when in "voice stealing" mode. This happens when a voice has been stolen but (as you haven't sent the object a note off message). Then \, when you eventually send a note off message \, the object won't find a corresponding note on message and will output that message as an "extra"., f 54;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 7 1 1 0;
#X connect 7 2 2 0;
#X connect 9 0 7 0;
#X connect 10 0 9 0;
#X restore 479 221 pd split;
#N canvas 536 81 503 350 retrigger 0;
#X text 66 30 [voices] has 3 different retrigger modes \, which are ways of handling repeated note on messages. In this context \, a repeated note on is a note that hasn't had a note off message to free its voice allocation. The modes are:, f 56;
#X text 179 189 See examples in the subpatches below:, f 19;
#X text 44 133 - retrig <2>:;
#X text 128 133 don't retrigger and send repeated notes ons to "extra" outlet, f 48;
#X text 128 102 (default) retrigger on the same voice allocation;
#X text 44 102 - retrig <0>:;
#X text 44 117 - retrig <1>:;
#N canvas 448 140 747 457 retrig_0 0;
#X obj 135 153 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 270 212 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 295 211 sustain;
#X obj 135 370 else/display;
#X obj 270 370 else/display;
#X obj 135 302 else/display;
#X obj 135 276 pack float float;
#X obj 270 185 loadbang;
#X obj 135 246 else/suspedal -retrig 1;
#X text 267 397 extra;
#X text 28 22 In retrigger mode 0 (default) \, [voices] sends repeated note on messages to the same voice number. One case possible is when you have a Note Off message with a release time. This can also happen without a Note Off message and in this case no Note Off is given prior to the repeated Note On., f 62;
#X text 28 83 Here we use [suspedal] in mode "1" \, which does not send a Note Off message and produces repeated Note On messages. It then outputs a single note off message when turned off., f 62;
#X obj 135 340 else/voices -retrig 0 2;
#X listbox 535 374 9 0 0 0 - - - 12;
#X msg 535 110 60;
#X obj 535 239 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 535 203 makenote 100 250;
#X obj 477 164 pipe 300;
#X msg 586 110 60;
#X obj 586 150 del 300;
#X msg 586 172 62;
#X text 437 20 Below we emulate a repeated Note On with [pipe] and we have a release time of 250 ms. The repeated note comes before the release time is finished and goes to the same voice allocation number., f 44;
#X text 474 110 repeated;
#X text 616 109 non repeated;
#X obj 535 410 print retrig mode 0 -->;
#X obj 535 340 voices -rel 250 2 1;
#X connect 0 0 8 0;
#X connect 1 0 8 2;
#X connect 5 0 12 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 8 0 6 0;
#X connect 8 1 6 1;
#X connect 12 0 3 0;
#X connect 12 1 4 0;
#X connect 13 0 24 0;
#X connect 14 0 16 0;
#X connect 14 0 17 0;
#X connect 15 0 25 0;
#X connect 16 0 15 0;
#X connect 16 1 15 1;
#X connect 17 0 16 0;
#X connect 18 0 16 0;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 16 0;
#X connect 25 0 13 0;
#X restore 196 241 pd retrig_0;
#N canvas 513 110 780 471 retrig_2 0;
#X obj 133 341 else/display;
#X obj 256 341 else/display;
#X obj 133 112 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 268 171 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 293 170 sustain;
#X obj 133 235 pack float float;
#X obj 133 205 else/suspedal -retrig 3;
#X obj 268 144 loadbang;
#X obj 133 268 else/display;
#X text 279 318 extra;
#X text 39 32 In retrigger mode 2 \, repeated notes go to the extra outlet. Here we have [suspedal] in retrig mode 3 again \, which sends note off for all repeated note ons when the sustain is switched off.;
#X obj 133 311 else/voices -retrig 2;
#X obj 256 387 print extra;
#X obj 133 387 print list;
#X listbox 516 368 9 0 0 0 - - - 12;
#X msg 516 104 60;
#X obj 516 233 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 516 197 makenote 100 250;
#X obj 458 158 pipe 300;
#X msg 567 104 60;
#X obj 567 144 del 300;
#X msg 567 166 62;
#X text 455 104 repeated;
#X text 597 103 non repeated;
#X listbox 675 368 9 0 0 0 - - - 12;
#X obj 516 334 voices -retrig 2 -rel 250 2;
#X text 423 30 Below we emulate a repeated Note On with [pipe] and we have a release time of 250 ms. The repeated note goes to the extra outlet., f 50;
#X connect 0 0 13 0;
#X connect 1 0 12 0;
#X connect 2 0 6 0;
#X connect 3 0 6 2;
#X connect 5 0 8 0;
#X connect 6 0 5 0;
#X connect 6 1 5 1;
#X connect 7 0 3 0;
#X connect 8 0 11 0;
#X connect 11 0 0 0;
#X connect 11 1 1 0;
#X connect 15 0 17 0;
#X connect 15 0 18 0;
#X connect 16 0 25 0;
#X connect 17 0 16 0;
#X connect 17 1 16 1;
#X connect 18 0 17 0;
#X connect 19 0 17 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 17 0;
#X connect 25 0 14 0;
#X connect 25 1 24 0;
#X restore 196 297 pd retrig_2;
#N canvas 526 187 696 491 retrig_1 0;
#X obj 69 142 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 204 201 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 229 200 sustain;
#X obj 69 359 else/display;
#X obj 216 359 else/display;
#X obj 69 291 else/display;
#X obj 69 265 pack float float;
#X obj 204 174 loadbang;
#X text 234 336 extra;
#X obj 69 235 else/suspedal -retrig 3;
#X obj 69 329 else/voices -retrig 1 2 1;
#X obj 216 403 print extra;
#X obj 69 403 print list;
#X text 51 27 In retrigger mode 1 \, a repeated note goes to another voice allocation number. Here we have [suspedal] in retrigger mode 3 \, which sends Note Off messages for all given Note Ons. You can see that "extra" Note Off messages go to the "extra" outlet., f 36;
#X listbox 417 388 9 0 0 0 - - - 12;
#X msg 417 124 60;
#X obj 417 253 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 417 217 makenote 100 250;
#X obj 359 178 pipe 300;
#X msg 468 124 60;
#X obj 468 164 del 300;
#X msg 468 186 62;
#X text 356 124 repeated;
#X text 498 123 non repeated;
#X obj 417 424 print retrig mode 0 -->;
#X text 313 38 Below we emulate a repeated Note On with [pipe] and we have a release time of 250 ms. The repeated note goes to another voice allocation number., f 50;
#X obj 417 354 voices -retrig 1 -rel 250 2 1;
#X connect 0 0 9 0;
#X connect 1 0 9 2;
#X connect 3 0 12 0;
#X connect 4 0 11 0;
#X connect 5 0 10 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 9 0 6 0;
#X connect 9 1 6 1;
#X connect 10 0 3 0;
#X connect 10 1 4 0;
#X connect 14 0 24 0;
#X connect 15 0 17 0;
#X connect 15 0 18 0;
#X connect 16 0 26 0;
#X connect 17 0 16 0;
#X connect 17 1 16 1;
#X connect 18 0 17 0;
#X connect 19 0 17 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 17 0;
#X connect 26 0 14 0;
#X restore 196 269 pd retrig_1;
#X text 128 117 retrigger on a new voice allocation, f 48;
#X restore 455 262 pd retrigger;
#N canvas 705 159 469 361 release 0;
#X obj 108 318 else/display;
#X obj 167 318 else/display;
#X obj 108 135 else/keyboard 17 80 2 4 0 0 empty empty;
#X obj 226 318 else/display;
#X obj 285 318 else/display;
#X obj 345 318 else/display;
#X obj 41 153 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1000;
#X obj 41 181 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 41 203 rel \$1;
#X obj 108 291 else/voices -split -rel 1000 4, f 40;
#X text 41 23 You can set a release time to prevent a note off from freeing a voice allocation. This keeps it allocated for that period of time after a note off is sent., f 65;
#X obj 345 231 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1000;
#X obj 345 259 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 41 65 This is useful if you want to wait for a release envelope to finish before using that voice allocation for a new note. Set the release time in ms with the '-rel' flag \, 'rel' message or right inlet., f 65;
#X text 264 258 release time;
#X connect 2 0 9 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X connect 9 1 1 0;
#X connect 9 2 3 0;
#X connect 9 3 4 0;
#X connect 9 4 5 0;
#X connect 11 0 12 0;
#X connect 12 0 9 1;
#X restore 467 242 pd release;
#X obj 31 273 else/mono;
#X text 124 566 -retrig <float>: sets retrigger mode <0 \, 1 or 2> (default 0), f 63;
#X text 185 320 list - MIDI note messages (note and velocity pair or more);
#N canvas 705 74 430 441 list 0;
#X obj 80 257 else/keyboard 22 80 2 4 1 0 empty empty;
#X listbox 60 387 27 0 0 0 - - - 12;
#X obj 60 353 else/voices 4;
#X msg 83 174 60 127 1 x whatever 1 2 3, f 14;
#X text 185 112 The extra elements besides note and velocity are only sent at "note on" time. Note off only contains a pitch and '0' velocity pair., f 36;
#X msg 74 148 C4 127 1.5 1;
#X msg 61 121 69 127 2;
#X obj 60 221 else/makenote2 60 off 1 x;
#X text 42 23 The list input expects at least two elements \, which would be "note" and "velocity". Note \, however \, that you can have more elements and that the first element does not need to be a float. This works well for regular MIDI note messages as given by [keyboard] or more complex Note On and Note Off messages as possible with [makenote2] (check its help file).;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 7 0;
#X connect 7 0 2 0;
#X restore 449 179 pd list input;
#X text 161 336 anything - other custom messages to route to active voices, f 62;
#N canvas 700 90 519 383 custom 0;
#X obj 133 297 else/voices 4;
#X msg 133 227 60 127;
#X obj 133 197 loadbang;
#X listbox 133 338 23 0 0 0 - - - 12;
#X msg 210 178 170 \, 60 \, 120;
#X obj 210 229 else/midi.in;
#X obj 210 254 else/display;
#X text 46 18 Other ("anything") messages are treated as custom messages and are sent out according to the voice allocation. Say for instance you want to send poliphonic aftertouch to an active voice. See an example below for that where we have a MIDI Note message (pitch 60) activating voice number 0 \, then you can click on the message to the right to generate a polyphonic message for the same pitch., f 64;
#X text 46 106 A message like this will be routed to the same voice allocation if the first element in the list after the selector corresponds to an allocated pitch (float or symbol)., f 64;
#X text 294 177 <-- ployphonic aftertouch;
#X msg 227 204 128 \, 60 \, 88;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X connect 10 0 5 0;
#X restore 419 282 pd custom messages;
#X obj 102 446 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 179 446 float - sets release time, f 57;
#X text 36 84 [voices] does voice allocation for polyphonic synths similarly to Vanilla's [poly] \, but with more functionalities. By default \, it outputs the voice information as a list with at least: voice index \, pitch and velocity \, but it can also route the voices to different outlets in "split" mode. In either way the rightmost outlet sends messages for the extra voices., f 83;
#X connect 34 0 32 0;
#X connect 34 1 33 0;
#X connect 35 0 36 0;
#X connect 35 1 36 1;
#X connect 36 0 34 0;
#X connect 37 0 34 0;
