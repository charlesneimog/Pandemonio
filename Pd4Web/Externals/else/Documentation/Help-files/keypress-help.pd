#N canvas 449 37 561 564 10;
#X obj 4 324 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 415 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 467 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 124 422 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 535 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 124 331 cnv 17 3 79 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 2 cnv 15 301 42 empty empty keypress 20 20 2 37 #e0e0e0 #000000 0;
#X obj 307 3 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 2 graph;
#X obj 346 10 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 22 39 cnv 4 4 4 empty empty Respond\ to\ computer\ keyboard\ presses 0 28 2 18 #e0e0e0 #000000 0;
#X obj 459 10 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 479 10 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 516 10 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 465 25 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 503 25 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 306 2 graph;
#X text 199 374 query;
#X msg 233 218 query;
#X obj 308 288 else/display;
#X text 235 389 - forget input, f 42;
#X obj 124 444 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 193 389 forget;
#X text 235 374 - print send stored input on right outlet, f 42;
#X obj 197 288 else/display;
#X text 235 329 - teach a specific key, f 42;
#X text 247 343 activate key learn, f 40;
#X text 169 422 bang/float -;
#X text 193 445 symbol -;
#X text 145 358 toggle <float>;
#X text 235 358 - non zero sets to toggle mode, f 42;
#N canvas 674 194 360 265 toggle 0;
#X obj 210 194 else/display;
#X obj 123 197 else/display;
#X text 44 32 In toggle mode you have "1" for when the learned key is pressed and 0 when it is released., f 40;
#X msg 123 124 toggle \$1;
#X obj 123 88 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 123 162 else/keypress b;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X connect 5 0 1 0;
#X connect 5 1 0 0;
#X restore 461 286 pd toggle;
#X msg 197 157 set Space;
#X msg 223 191 learn;
#X msg 154 157 set a;
#X text 260 156 set a specific key;
#X obj 4 501 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X text 155 476 -toggle - sets to toggle output (default bang);
#X msg 126 210 set;
#X text 90 209 none;
#X obj 197 262 else/keypress Space;
#X text 157 329 set <symbol>;
#X text 199 343 learn -;
#X text 247 423 from set key depending on the mode, f 41;
#X text 247 445 set key, f 41;
#X text 158 509 1) symbol - sets a key name (default none);
#X text 48 83 [keypress] uses key presses of a single computer keyboard key by sending a bang or a toggle. You can set the key symbol as an argument or ask the object to "learn" a pressed key (useful for keys like "shift" and stuff) \, which is then saved as an argument. Note that autorepeated keys are filtered! Key presses in edit mode are also filtered!, f 77;
#X text 285 186 Whenever the abstraction learns something new \, you'll be prompted to save your patch when you close it so it gets saved. After sending "learn" \, press a key to teach the object., f 42;
#X text 17 264 Caveat: 2 objects with the same key don't work well..., f 23;
#X connect 18 0 40 0;
#X connect 32 0 40 0;
#X connect 33 0 40 0;
#X connect 34 0 40 0;
#X connect 38 0 40 0;
#X connect 40 0 24 0;
#X connect 40 1 19 0;
